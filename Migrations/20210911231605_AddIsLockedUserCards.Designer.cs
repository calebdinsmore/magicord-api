// <auto-generated />
using System;
using System.Collections.Generic;
using Magicord.Models;
using Magicord.Models.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Magicord.Migrations
{
    [DbContext(typeof(MagicordContext))]
    [Migration("20210911231605_AddIsLockedUserCards")]
    partial class AddIsLockedUserCards
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasPostgresEnum("dbo", "cards_border_color", new[] { "black", "white", "borderless", "silver", "gold" })
                .HasPostgresEnum("dbo", "cards_frame_version", new[] { "2003", "1993", "2015", "1997", "future" })
                .HasPostgresEnum("dbo", "cards_layout", new[] { "normal", "aftermath", "split", "flip", "leveler", "saga", "vanguard", "transform", "adventure", "meld", "scheme", "planar", "host", "augment" })
                .HasPostgresEnum("dbo", "cards_rarity", new[] { "rare", "uncommon", "common", "mythic", "special", "bonus" })
                .HasPostgresEnum("dbo", "foreign_data_language", new[] { "German", "Spanish", "French", "Italian", "Japanese", "Portuguese (Brazil)", "Russian", "Chinese Simplified", "Korean", "Chinese Traditional", "Phyrexian", "Sanskrit", "Hebrew", "Ancient Greek", "Latin", "Arabic" })
                .HasPostgresEnum("dbo", "legalities_format", new[] { "commander", "duel", "legacy", "modern", "vintage", "pauper", "penny", "historic", "pioneer", "brawl", "future", "standard", "oldschool" })
                .HasPostgresEnum("dbo", "legalities_status", new[] { "Legal", "Banned", "Restricted" })
                .HasPostgresEnum("dbo", "set_translations_language", new[] { "Chinese Simplified", "Chinese Traditional", "French", "German", "Italian", "Japanese", "Korean", "Portuguese (Brazil)", "Russian", "Spanish" })
                .HasPostgresEnum("dbo", "sets_type", new[] { "core", "masters", "expansion", "starter", "memorabilia", "archenemy", "box", "draft_innovation", "commander", "funny", "duel_deck", "from_the_vault", "masterpiece", "promo", "premium_deck", "planechase", "token", "vanguard", "treasure_chest", "spellbook" })
                .HasPostgresEnum("dbo", "tokens_border_color", new[] { "black", "borderless", "silver", "gold" })
                .HasPostgresEnum("dbo", "tokens_layout", new[] { "token", "double_faced_token", "emblem", "art_series", "normal" })
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Magicord.Models.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('dbo.cards_id_seq'::regclass)");

                    b.Property<string>("Artist")
                        .HasColumnType("text")
                        .HasColumnName("artist");

                    b.Property<string>("AsciiName")
                        .HasColumnType("text")
                        .HasColumnName("ascii_name");

                    b.Property<string>("Availability")
                        .HasColumnType("text")
                        .HasColumnName("availability");

                    b.Property<string>("CardKingdomFoilId")
                        .HasColumnType("text")
                        .HasColumnName("card_kingdom_foil_id");

                    b.Property<string>("CardKingdomId")
                        .HasColumnType("text")
                        .HasColumnName("card_kingdom_id");

                    b.Property<string>("ColorIdentity")
                        .HasColumnType("text")
                        .HasColumnName("color_identity");

                    b.Property<string>("ColorIndicator")
                        .HasColumnType("text")
                        .HasColumnName("color_indicator");

                    b.Property<string>("Colors")
                        .HasColumnType("text")
                        .HasColumnName("colors");

                    b.Property<double?>("ConvertedManaCost")
                        .HasColumnType("double precision")
                        .HasColumnName("converted_mana_cost");

                    b.Property<string>("DuelDeck")
                        .HasColumnType("text")
                        .HasColumnName("duel_deck");

                    b.Property<long?>("EdhrecRank")
                        .HasColumnType("bigint")
                        .HasColumnName("edhrec_rank");

                    b.Property<double?>("FaceConvertedManaCost")
                        .HasColumnType("double precision")
                        .HasColumnName("face_converted_mana_cost");

                    b.Property<string>("FaceName")
                        .HasColumnType("text")
                        .HasColumnName("face_name");

                    b.Property<string>("FlavorName")
                        .HasColumnType("text")
                        .HasColumnName("flavor_name");

                    b.Property<string>("FlavorText")
                        .HasColumnType("text")
                        .HasColumnName("flavor_text");

                    b.Property<string>("FrameEffects")
                        .HasColumnType("text")
                        .HasColumnName("frame_effects");

                    b.Property<string>("Hand")
                        .HasColumnType("text")
                        .HasColumnName("hand");

                    b.Property<bool>("HasAlternativeDeckLimit")
                        .HasColumnType("boolean")
                        .HasColumnName("has_alternative_deck_limit");

                    b.Property<bool>("HasContentWarning")
                        .HasColumnType("boolean")
                        .HasColumnName("has_content_warning");

                    b.Property<bool>("HasFoil")
                        .HasColumnType("boolean")
                        .HasColumnName("has_foil");

                    b.Property<bool>("HasNonFoil")
                        .HasColumnType("boolean")
                        .HasColumnName("has_non_foil");

                    b.Property<bool>("IsAlternative")
                        .HasColumnType("boolean")
                        .HasColumnName("is_alternative");

                    b.Property<bool>("IsFullArt")
                        .HasColumnType("boolean")
                        .HasColumnName("is_full_art");

                    b.Property<bool>("IsOnlineOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_online_only");

                    b.Property<bool>("IsOversized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_oversized");

                    b.Property<bool>("IsPromo")
                        .HasColumnType("boolean")
                        .HasColumnName("is_promo");

                    b.Property<bool>("IsReprint")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reprint");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reserved");

                    b.Property<bool>("IsStarter")
                        .HasColumnType("boolean")
                        .HasColumnName("is_starter");

                    b.Property<bool>("IsStorySpotlight")
                        .HasColumnType("boolean")
                        .HasColumnName("is_story_spotlight");

                    b.Property<bool>("IsTextless")
                        .HasColumnType("boolean")
                        .HasColumnName("is_textless");

                    b.Property<bool>("IsTimeshifted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_timeshifted");

                    b.Property<string>("Keywords")
                        .HasColumnType("text")
                        .HasColumnName("keywords");

                    b.Property<string>("LeadershipSkills")
                        .HasColumnType("text")
                        .HasColumnName("leadership_skills");

                    b.Property<string>("Life")
                        .HasColumnType("text")
                        .HasColumnName("life");

                    b.Property<string>("Loyalty")
                        .HasColumnType("text")
                        .HasColumnName("loyalty");

                    b.Property<string>("ManaCost")
                        .HasColumnType("text")
                        .HasColumnName("mana_cost");

                    b.Property<string>("McmId")
                        .HasColumnType("text")
                        .HasColumnName("mcm_id");

                    b.Property<string>("McmMetaId")
                        .HasColumnType("text")
                        .HasColumnName("mcm_meta_id");

                    b.Property<string>("MtgArenaId")
                        .HasColumnType("text")
                        .HasColumnName("mtg_arena_id");

                    b.Property<string>("MtgjsonV4Id")
                        .HasColumnType("text")
                        .HasColumnName("mtgjson_v4_id");

                    b.Property<string>("MtgoFoilId")
                        .HasColumnType("text")
                        .HasColumnName("mtgo_foil_id");

                    b.Property<string>("MtgoId")
                        .HasColumnType("text")
                        .HasColumnName("mtgo_id");

                    b.Property<string>("MultiverseId")
                        .HasColumnType("text")
                        .HasColumnName("multiverse_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("OriginalText")
                        .HasColumnType("text")
                        .HasColumnName("original_text");

                    b.Property<string>("OriginalType")
                        .HasColumnType("text")
                        .HasColumnName("original_type");

                    b.Property<string>("OtherFaceIds")
                        .HasColumnType("text")
                        .HasColumnName("other_face_ids");

                    b.Property<string>("Power")
                        .HasColumnType("text")
                        .HasColumnName("power");

                    b.Property<string>("Printings")
                        .HasColumnType("text")
                        .HasColumnName("printings");

                    b.Property<string>("PromoTypes")
                        .HasColumnType("text")
                        .HasColumnName("promo_types");

                    b.Property<string>("PurchaseUrls")
                        .HasColumnType("text")
                        .HasColumnName("purchase_urls");

                    b.Property<CardsRarity>("Rarity")
                        .HasColumnType("cards_rarity")
                        .HasColumnName("rarity");

                    b.Property<string>("ScryfallId")
                        .HasColumnType("text")
                        .HasColumnName("scryfall_id");

                    b.Property<string>("ScryfallIllustrationId")
                        .HasColumnType("text")
                        .HasColumnName("scryfall_illustration_id");

                    b.Property<string>("ScryfallOracleId")
                        .HasColumnType("text")
                        .HasColumnName("scryfall_oracle_id");

                    b.Property<string>("SetCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("set_code");

                    b.Property<string>("Side")
                        .HasColumnType("text")
                        .HasColumnName("side");

                    b.Property<string>("Subtypes")
                        .HasColumnType("text")
                        .HasColumnName("subtypes");

                    b.Property<string>("Supertypes")
                        .HasColumnType("text")
                        .HasColumnName("supertypes");

                    b.Property<string>("TcgplayerProductId")
                        .HasColumnType("text")
                        .HasColumnName("tcgplayer_product_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Toughness")
                        .HasColumnType("text")
                        .HasColumnName("toughness");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Types")
                        .HasColumnType("text")
                        .HasColumnName("types");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("uuid")
                        .IsFixedLength(true);

                    b.Property<string>("Variations")
                        .HasColumnType("text")
                        .HasColumnName("variations");

                    b.Property<string>("Watermark")
                        .HasColumnType("text")
                        .HasColumnName("watermark");

                    b.HasKey("Id")
                        .HasName("pk_card");

                    b.HasAlternateKey("Uuid")
                        .HasName("ak_card_uuid");

                    b.HasIndex("SetCode")
                        .HasDatabaseName("idx_24799_set_code");

                    b.HasIndex("Uuid")
                        .IsUnique()
                        .HasDatabaseName("idx_24799_uuid");

                    b.ToTable("card", "dbo");
                });

            modelBuilder.Entity("Magicord.Models.CardPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Dictionary<DateTime, decimal>>("BuylistFoilHistory")
                        .HasColumnType("jsonb")
                        .HasColumnName("buylist_foil_history");

                    b.Property<Dictionary<DateTime, decimal>>("BuylistNonFoilHistory")
                        .HasColumnType("jsonb")
                        .HasColumnName("buylist_non_foil_history");

                    b.Property<string>("CardUuid")
                        .IsRequired()
                        .HasColumnType("character(36)")
                        .HasColumnName("card_uuid");

                    b.Property<decimal>("CurrentBuylistFoil")
                        .HasColumnType("numeric")
                        .HasColumnName("current_buylist_foil");

                    b.Property<decimal>("CurrentBuylistNonFoil")
                        .HasColumnType("numeric")
                        .HasColumnName("current_buylist_non_foil");

                    b.Property<decimal>("CurrentRetailFoil")
                        .HasColumnType("numeric")
                        .HasColumnName("current_retail_foil");

                    b.Property<decimal>("CurrentRetailNonFoil")
                        .HasColumnType("numeric")
                        .HasColumnName("current_retail_non_foil");

                    b.Property<Dictionary<DateTime, decimal>>("RetailFoilHistory")
                        .HasColumnType("jsonb")
                        .HasColumnName("retail_foil_history");

                    b.Property<Dictionary<DateTime, decimal>>("RetailNonFoilHistory")
                        .HasColumnType("jsonb")
                        .HasColumnName("retail_non_foil_history");

                    b.HasKey("Id")
                        .HasName("pk_card_price");

                    b.HasIndex("CardUuid")
                        .IsUnique()
                        .HasDatabaseName("ix_card_price_card_uuid");

                    b.ToTable("card_price");
                });

            modelBuilder.Entity("Magicord.Models.CardPriceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("BuylistFoil")
                        .HasColumnType("numeric")
                        .HasColumnName("buylist_foil");

                    b.Property<decimal>("BuylistNonFoil")
                        .HasColumnType("numeric")
                        .HasColumnName("buylist_non_foil");

                    b.Property<long>("CardPriceId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_price_id");

                    b.Property<string>("CardUuid")
                        .HasColumnType("character(36)")
                        .HasColumnName("card_uuid");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_recorded");

                    b.Property<decimal>("RetailFoil")
                        .HasColumnType("numeric")
                        .HasColumnName("retail_foil");

                    b.Property<decimal>("RetailNonFoil")
                        .HasColumnType("numeric")
                        .HasColumnName("retail_non_foil");

                    b.HasKey("Id")
                        .HasName("pk_card_price_history");

                    b.HasIndex("CardPriceId")
                        .HasDatabaseName("ix_card_price_history_card_price_id");

                    b.HasIndex("CardUuid")
                        .HasDatabaseName("ix_card_price_history_card_uuid");

                    b.ToTable("card_price_history");
                });

            modelBuilder.Entity("Magicord.Models.ForeignData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FlavorText")
                        .HasColumnType("text")
                        .HasColumnName("flavor_text");

                    b.Property<long?>("Multiverseid")
                        .HasColumnType("bigint")
                        .HasColumnName("multiverseid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("uuid")
                        .IsFixedLength(true);

                    b.HasKey("Id")
                        .HasName("pk_foreign_data");

                    b.HasIndex("Uuid")
                        .HasDatabaseName("idx_24823_uuid");

                    b.ToTable("foreign_data", "dbo");
                });

            modelBuilder.Entity("Magicord.Models.Legality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('dbo.legalities_id_seq'::regclass)");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("uuid")
                        .IsFixedLength(true);

                    b.HasKey("Id")
                        .HasName("pk_legality");

                    b.HasIndex("Uuid")
                        .HasDatabaseName("idx_24832_uuid");

                    b.ToTable("legality", "dbo");
                });

            modelBuilder.Entity("Magicord.Models.Meta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_meta");

                    b.ToTable("meta", "dbo");
                });

            modelBuilder.Entity("Magicord.Models.Ruling", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('dbo.rulings_id_seq'::regclass)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("uuid")
                        .IsFixedLength(true);

                    b.HasKey("Id")
                        .HasName("pk_ruling");

                    b.HasIndex("Uuid")
                        .HasDatabaseName("idx_24847_uuid");

                    b.ToTable("ruling", "dbo");
                });

            modelBuilder.Entity("Magicord.Models.SealedEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("EntryFee")
                        .HasColumnType("numeric")
                        .HasColumnName("entry_fee");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("PacksAreDistributed")
                        .HasColumnType("boolean")
                        .HasColumnName("packs_are_distributed");

                    b.HasKey("Id")
                        .HasName("pk_sealed_event");

                    b.ToTable("sealed_event");
                });

            modelBuilder.Entity("Magicord.Models.SealedEventAttendee", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("SealedEventId")
                        .HasColumnType("bigint")
                        .HasColumnName("sealed_event_id");

                    b.Property<bool>("HasBeenGivenPacks")
                        .HasColumnType("boolean")
                        .HasColumnName("has_been_given_packs");

                    b.HasKey("UserId", "SealedEventId")
                        .HasName("pk_sealed_event_attendee");

                    b.HasIndex("SealedEventId")
                        .HasDatabaseName("ix_sealed_event_attendee_sealed_event_id");

                    b.ToTable("sealed_event_attendee");
                });

            modelBuilder.Entity("Magicord.Models.SealedEventPack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BoosterType")
                        .HasColumnType("text")
                        .HasColumnName("booster_type");

                    b.Property<int>("PackCount")
                        .HasColumnType("integer")
                        .HasColumnName("pack_count");

                    b.Property<long>("SealedEventId")
                        .HasColumnType("bigint")
                        .HasColumnName("sealed_event_id");

                    b.Property<string>("SetCode")
                        .HasColumnType("character varying(8)")
                        .HasColumnName("set_code");

                    b.HasKey("Id")
                        .HasName("pk_sealed_event_pack");

                    b.HasIndex("SealedEventId")
                        .HasDatabaseName("ix_sealed_event_pack_sealed_event_id");

                    b.HasIndex("SetCode")
                        .HasDatabaseName("ix_sealed_event_pack_set_code");

                    b.ToTable("sealed_event_pack");
                });

            modelBuilder.Entity("Magicord.Models.Set", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('dbo.sets_id_seq'::regclass)");

                    b.Property<long?>("BaseSetSize")
                        .HasColumnType("bigint")
                        .HasColumnName("base_set_size");

                    b.Property<string>("Block")
                        .HasColumnType("text")
                        .HasColumnName("block");

                    b.Property<string>("Booster")
                        .HasColumnType("jsonb")
                        .HasColumnName("booster");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("code");

                    b.Property<bool>("IsFoilOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_foil_only");

                    b.Property<bool>("IsForeignOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_foreign_only");

                    b.Property<bool>("IsNonFoilOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_non_foil_only");

                    b.Property<bool>("IsOnlineOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_online_only");

                    b.Property<bool>("IsPartialPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_partial_preview");

                    b.Property<string>("KeyruneCode")
                        .HasColumnType("text")
                        .HasColumnName("keyrune_code");

                    b.Property<long?>("McmId")
                        .HasColumnType("bigint")
                        .HasColumnName("mcm_id");

                    b.Property<string>("McmName")
                        .HasColumnType("text")
                        .HasColumnName("mcm_name");

                    b.Property<string>("MtgoCode")
                        .HasColumnType("text")
                        .HasColumnName("mtgo_code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text")
                        .HasColumnName("parent_code");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<long?>("TcgplayerGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("tcgplayer_group_id");

                    b.Property<long?>("TotalSetSize")
                        .HasColumnType("bigint")
                        .HasColumnName("total_set_size");

                    b.Property<SetsType>("Type")
                        .HasColumnType("sets_type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_set");

                    b.HasAlternateKey("Code")
                        .HasName("ak_set_code");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("idx_24856_code");

                    b.ToTable("set", "dbo");
                });

            modelBuilder.Entity("Magicord.Models.SetTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('dbo.set_translations_id_seq'::regclass)");

                    b.Property<string>("SetCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("set_code");

                    b.Property<string>("Translation")
                        .HasColumnType("text")
                        .HasColumnName("translation");

                    b.HasKey("Id")
                        .HasName("pk_set_translation");

                    b.HasIndex("SetCode")
                        .HasDatabaseName("idx_24870_set_code");

                    b.ToTable("set_translation", "dbo");
                });

            modelBuilder.Entity("Magicord.Models.StoreBoosterListing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BoosterType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("default")
                        .HasColumnName("booster_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("retail_price");

                    b.Property<string>("SetCode")
                        .IsRequired()
                        .HasColumnType("character varying(8)")
                        .HasColumnName("set_code");

                    b.HasKey("Id")
                        .HasName("pk_store_booster_listing");

                    b.HasIndex("SetCode")
                        .HasDatabaseName("ix_store_booster_listing_set_code");

                    b.ToTable("store_booster_listing");
                });

            modelBuilder.Entity("Magicord.Models.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('dbo.tokens_id_seq'::regclass)");

                    b.Property<string>("Artist")
                        .HasColumnType("text")
                        .HasColumnName("artist");

                    b.Property<string>("AsciiName")
                        .HasColumnType("text")
                        .HasColumnName("ascii_name");

                    b.Property<string>("Availability")
                        .HasColumnType("text")
                        .HasColumnName("availability");

                    b.Property<string>("ColorIdentity")
                        .HasColumnType("text")
                        .HasColumnName("color_identity");

                    b.Property<string>("Colors")
                        .HasColumnType("text")
                        .HasColumnName("colors");

                    b.Property<long?>("EdhrecRank")
                        .HasColumnType("bigint")
                        .HasColumnName("edhrec_rank");

                    b.Property<string>("FaceName")
                        .HasColumnType("text")
                        .HasColumnName("face_name");

                    b.Property<string>("FlavorText")
                        .HasColumnType("text")
                        .HasColumnName("flavor_text");

                    b.Property<string>("FrameEffects")
                        .HasColumnType("text")
                        .HasColumnName("frame_effects");

                    b.Property<string>("FrameVersion")
                        .HasColumnType("text")
                        .HasColumnName("frame_version");

                    b.Property<bool>("HasFoil")
                        .HasColumnType("boolean")
                        .HasColumnName("has_foil");

                    b.Property<bool>("HasNonFoil")
                        .HasColumnType("boolean")
                        .HasColumnName("has_non_foil");

                    b.Property<bool>("IsFullArt")
                        .HasColumnType("boolean")
                        .HasColumnName("is_full_art");

                    b.Property<bool>("IsPromo")
                        .HasColumnType("boolean")
                        .HasColumnName("is_promo");

                    b.Property<bool>("IsReprint")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reprint");

                    b.Property<string>("Keywords")
                        .HasColumnType("text")
                        .HasColumnName("keywords");

                    b.Property<string>("MtgArenaId")
                        .HasColumnType("text")
                        .HasColumnName("mtg_arena_id");

                    b.Property<string>("MtgjsonV4Id")
                        .HasColumnType("text")
                        .HasColumnName("mtgjson_v4_id");

                    b.Property<string>("MultiverseId")
                        .HasColumnType("text")
                        .HasColumnName("multiverse_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("OriginalText")
                        .HasColumnType("text")
                        .HasColumnName("original_text");

                    b.Property<string>("OriginalType")
                        .HasColumnType("text")
                        .HasColumnName("original_type");

                    b.Property<string>("Power")
                        .HasColumnType("text")
                        .HasColumnName("power");

                    b.Property<string>("PromoTypes")
                        .HasColumnType("text")
                        .HasColumnName("promo_types");

                    b.Property<string>("ReverseRelated")
                        .HasColumnType("text")
                        .HasColumnName("reverse_related");

                    b.Property<string>("ScryfallId")
                        .HasColumnType("text")
                        .HasColumnName("scryfall_id");

                    b.Property<string>("ScryfallIllustrationId")
                        .HasColumnType("text")
                        .HasColumnName("scryfall_illustration_id");

                    b.Property<string>("ScryfallOracleId")
                        .HasColumnType("text")
                        .HasColumnName("scryfall_oracle_id");

                    b.Property<string>("SetCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("set_code");

                    b.Property<string>("Side")
                        .HasColumnType("text")
                        .HasColumnName("side");

                    b.Property<string>("Subtypes")
                        .HasColumnType("text")
                        .HasColumnName("subtypes");

                    b.Property<string>("Supertypes")
                        .HasColumnType("text")
                        .HasColumnName("supertypes");

                    b.Property<string>("TcgplayerProductId")
                        .HasColumnType("text")
                        .HasColumnName("tcgplayer_product_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Toughness")
                        .HasColumnType("text")
                        .HasColumnName("toughness");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Types")
                        .HasColumnType("text")
                        .HasColumnName("types");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .HasColumnName("uuid")
                        .IsFixedLength(true);

                    b.Property<string>("Watermark")
                        .HasColumnType("text")
                        .HasColumnName("watermark");

                    b.HasKey("Id")
                        .HasName("pk_token");

                    b.HasIndex("SetCode")
                        .HasDatabaseName("idx_24879_set_code");

                    b.ToTable("token", "dbo");
                });

            modelBuilder.Entity("Magicord.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Magicord.Models.UserBooster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("buy_price");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("boolean")
                        .HasColumnName("is_opened");

                    b.Property<string>("SetCode")
                        .HasColumnType("character varying(8)")
                        .HasColumnName("set_code");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_booster");

                    b.HasIndex("SetCode")
                        .HasDatabaseName("ix_user_booster_set_code");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_booster_user_id");

                    b.ToTable("user_booster");
                });

            modelBuilder.Entity("Magicord.Models.UserBoosterCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CardUuid")
                        .HasColumnType("character(36)")
                        .HasColumnName("card_uuid");

                    b.Property<long>("UserBoosterId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_booster_id");

                    b.HasKey("Id")
                        .HasName("pk_user_booster_card");

                    b.HasIndex("CardUuid")
                        .HasDatabaseName("ix_user_booster_card_card_uuid");

                    b.HasIndex("UserBoosterId")
                        .HasDatabaseName("ix_user_booster_card_user_booster_id");

                    b.ToTable("user_booster_card");
                });

            modelBuilder.Entity("Magicord.Models.UserCard", b =>
                {
                    b.Property<string>("CardUuid")
                        .HasColumnType("character(36)")
                        .HasColumnName("card_uuid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("AmountFoil")
                        .HasColumnType("integer")
                        .HasColumnName("amount_foil");

                    b.Property<int>("AmountNonFoil")
                        .HasColumnType("integer")
                        .HasColumnName("amount_non_foil");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("CardUuid", "UserId")
                        .HasName("pk_user_card");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_card_user_id");

                    b.ToTable("user_card");
                });

            modelBuilder.Entity("Magicord.Models.UserShare", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<decimal>("AverageInvestedValue")
                        .HasColumnType("numeric")
                        .HasColumnName("average_invested_value");

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<decimal>("CashInvested")
                        .HasColumnType("numeric")
                        .HasColumnName("cash_invested");

                    b.Property<bool>("IsFoil")
                        .HasColumnType("boolean")
                        .HasColumnName("is_foil");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_user_share");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_user_share_card_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_share_user_id");

                    b.ToTable("user_share");
                });

            modelBuilder.Entity("Magicord.Models.UserShort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<bool>("IsFoil")
                        .HasColumnType("boolean")
                        .HasColumnName("is_foil");

                    b.Property<decimal>("ReservedCash")
                        .HasColumnType("numeric")
                        .HasColumnName("reserved_cash");

                    b.Property<decimal>("ShortedValue")
                        .HasColumnType("numeric")
                        .HasColumnName("shorted_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_user_short");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_user_short_card_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_short_user_id");

                    b.ToTable("user_short");
                });

            modelBuilder.Entity("Magicord.Models.Card", b =>
                {
                    b.HasOne("Magicord.Models.Set", "SetCodeNavigation")
                        .WithMany("Cards")
                        .HasForeignKey("SetCode")
                        .HasConstraintName("cards_ibfk_1")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetCodeNavigation");
                });

            modelBuilder.Entity("Magicord.Models.CardPrice", b =>
                {
                    b.HasOne("Magicord.Models.Card", "Card")
                        .WithOne("CardPrice")
                        .HasForeignKey("Magicord.Models.CardPrice", "CardUuid")
                        .HasConstraintName("fk_card_price_card_card_id")
                        .HasPrincipalKey("Magicord.Models.Card", "Uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Magicord.Models.CardPriceHistory", b =>
                {
                    b.HasOne("Magicord.Models.CardPrice", "CardPrice")
                        .WithMany("CardPriceHistories")
                        .HasForeignKey("CardPriceId")
                        .HasConstraintName("fk_card_price_history_card_price_card_price_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magicord.Models.Card", "Card")
                        .WithMany("CardPriceHistories")
                        .HasForeignKey("CardUuid")
                        .HasConstraintName("fk_card_price_history_card_card_id")
                        .HasPrincipalKey("Uuid");

                    b.Navigation("Card");

                    b.Navigation("CardPrice");
                });

            modelBuilder.Entity("Magicord.Models.ForeignData", b =>
                {
                    b.HasOne("Magicord.Models.Card", "Uu")
                        .WithMany("ForeignDatas")
                        .HasForeignKey("Uuid")
                        .HasConstraintName("foreign_data_ibfk_1")
                        .HasPrincipalKey("Uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uu");
                });

            modelBuilder.Entity("Magicord.Models.Legality", b =>
                {
                    b.HasOne("Magicord.Models.Card", "Uu")
                        .WithMany("Legalities")
                        .HasForeignKey("Uuid")
                        .HasConstraintName("legalities_ibfk_1")
                        .HasPrincipalKey("Uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uu");
                });

            modelBuilder.Entity("Magicord.Models.Ruling", b =>
                {
                    b.HasOne("Magicord.Models.Card", "Uu")
                        .WithMany("Rulings")
                        .HasForeignKey("Uuid")
                        .HasConstraintName("rulings_ibfk_1")
                        .HasPrincipalKey("Uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uu");
                });

            modelBuilder.Entity("Magicord.Models.SealedEventAttendee", b =>
                {
                    b.HasOne("Magicord.Models.SealedEvent", "SealedEvent")
                        .WithMany("SealedEventAttendees")
                        .HasForeignKey("SealedEventId")
                        .HasConstraintName("fk_sealed_event_attendee_sealed_events_sealed_event_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magicord.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sealed_event_attendee_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SealedEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Magicord.Models.SealedEventPack", b =>
                {
                    b.HasOne("Magicord.Models.SealedEvent", "SealedEvent")
                        .WithMany("SealedEventPacks")
                        .HasForeignKey("SealedEventId")
                        .HasConstraintName("fk_sealed_event_pack_sealed_events_sealed_event_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magicord.Models.Set", "Set")
                        .WithMany("SealedEventPacks")
                        .HasForeignKey("SetCode")
                        .HasConstraintName("fk_sealed_event_pack_sets_set_id")
                        .HasPrincipalKey("Code");

                    b.Navigation("SealedEvent");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("Magicord.Models.SetTranslation", b =>
                {
                    b.HasOne("Magicord.Models.Set", "SetCodeNavigation")
                        .WithMany("SetTranslations")
                        .HasForeignKey("SetCode")
                        .HasConstraintName("set_translations_ibfk_1")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetCodeNavigation");
                });

            modelBuilder.Entity("Magicord.Models.StoreBoosterListing", b =>
                {
                    b.HasOne("Magicord.Models.Set", "Set")
                        .WithMany("StoreBoosterListings")
                        .HasForeignKey("SetCode")
                        .HasConstraintName("fk_store_booster_listing_set_set_id")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("Magicord.Models.Token", b =>
                {
                    b.HasOne("Magicord.Models.Set", "SetCodeNavigation")
                        .WithMany("Tokens")
                        .HasForeignKey("SetCode")
                        .HasConstraintName("tokens_ibfk_1")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetCodeNavigation");
                });

            modelBuilder.Entity("Magicord.Models.UserBooster", b =>
                {
                    b.HasOne("Magicord.Models.Set", "Set")
                        .WithMany("UserBoosters")
                        .HasForeignKey("SetCode")
                        .HasConstraintName("fk_user_booster_set_set_id")
                        .HasPrincipalKey("Code");

                    b.HasOne("Magicord.Models.User", "User")
                        .WithMany("UserBoosters")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_booster_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Magicord.Models.UserBoosterCard", b =>
                {
                    b.HasOne("Magicord.Models.Card", "Card")
                        .WithMany("UserBoosterCards")
                        .HasForeignKey("CardUuid")
                        .HasConstraintName("fk_user_booster_card_cards_card_id")
                        .HasPrincipalKey("Uuid");

                    b.HasOne("Magicord.Models.UserBooster", "UserBooster")
                        .WithMany("UserBoosterCards")
                        .HasForeignKey("UserBoosterId")
                        .HasConstraintName("fk_user_booster_card_user_boosters_user_booster_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("UserBooster");
                });

            modelBuilder.Entity("Magicord.Models.UserCard", b =>
                {
                    b.HasOne("Magicord.Models.Card", "Card")
                        .WithMany("UserCards")
                        .HasForeignKey("CardUuid")
                        .HasConstraintName("fk_user_card_cards_card_id")
                        .HasPrincipalKey("Uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magicord.Models.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_card_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Magicord.Models.UserShare", b =>
                {
                    b.HasOne("Magicord.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .HasConstraintName("fk_user_share_card_card_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magicord.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_share_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Magicord.Models.UserShort", b =>
                {
                    b.HasOne("Magicord.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .HasConstraintName("fk_user_short_card_card_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magicord.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_short_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Magicord.Models.Card", b =>
                {
                    b.Navigation("CardPrice");

                    b.Navigation("CardPriceHistories");

                    b.Navigation("ForeignDatas");

                    b.Navigation("Legalities");

                    b.Navigation("Rulings");

                    b.Navigation("UserBoosterCards");

                    b.Navigation("UserCards");
                });

            modelBuilder.Entity("Magicord.Models.CardPrice", b =>
                {
                    b.Navigation("CardPriceHistories");
                });

            modelBuilder.Entity("Magicord.Models.SealedEvent", b =>
                {
                    b.Navigation("SealedEventAttendees");

                    b.Navigation("SealedEventPacks");
                });

            modelBuilder.Entity("Magicord.Models.Set", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("SealedEventPacks");

                    b.Navigation("SetTranslations");

                    b.Navigation("StoreBoosterListings");

                    b.Navigation("Tokens");

                    b.Navigation("UserBoosters");
                });

            modelBuilder.Entity("Magicord.Models.User", b =>
                {
                    b.Navigation("UserBoosters");

                    b.Navigation("UserCards");
                });

            modelBuilder.Entity("Magicord.Models.UserBooster", b =>
                {
                    b.Navigation("UserBoosterCards");
                });
#pragma warning restore 612, 618
        }
    }
}
